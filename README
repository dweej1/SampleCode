source:
http://community.topcoder.com/stat?c=problem_statement&pm=12324
---
You have a few marbles of possibly different sizes. You are given a int[] radius that describes the marbles: each element of radius is the radius of one of your marbles.



You want to place all marbles onto a straight line that is drawn on the table. Clearly, this makes the problem two-dimensional: we can just view the marbles as circles that will all be touching the line from above. Of course, the marbles cannot overlap, so in our problem no two circles are allowed to overlap. Note that you may place the marbles onto the line in any order, you do not have to preserve the order in which they are given in radius.



Additionally, you want to pack the bottoms of the marbles as close together as possible. More precisely: For each marble consider the point where it touches the line. Compute and return the smallest possible distance between the farthest two of those points. (That is, if you imagine the line as going from the left to the right, your task is to minimize the distance between the leftmost and the rightmost of the points where the circles touch the line.)
 

Definition
    	
Class:	MarblePositioning
Method:	totalWidth
Parameters:	int[]
Returns:	double
Method signature:	double totalWidth(int[] radius)
(be sure your method is public)
    
 
Notes
-	The returned values must have an absolute or relative error less than 1e-9.
 
Constraints
-	radius will contain between 2 and 8 elements, inclusive.
-	Each element of radius will be between 1 and 1000000000 (10^9), inclusive.

======

DVP:
-the best spot for [n+1] marble will always be extending best-order of [n] marbles
-non-best spots for marble n will never be best spot for marble n+1?
(simple inductive proof in my head)


-sort by radius, start with two biggest
-insert marble[2] at max_overlap of 3 insert points
-add 2 new insert points
-insert marble[3] at max_overlap 
-etc.
(greedy algo)

-possible dynamic programming opportunities:  
-avoid checking insert points: 





 